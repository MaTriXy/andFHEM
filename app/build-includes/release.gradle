/*
 * AndFHEM - Open Source Android application to control a FHEM home automation
 * server.
 *
 * Copyright (c) 2011, Matthias Klass or third-party contributors as
 * indicated by the @author tags or express copyright attribution
 * statements applied by the authors.  All third-party contributions are
 * distributed under license by Red Hat Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU GENERAL PUBLIC LICENSE, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU GENERAL PUBLIC LICENSE
 * for more details.
 *
 * You should have received a copy of the GNU GENERAL PUBLIC LICENSE
 * along with this distribution; if not, write to:
 *   Free Software Foundation, Inc.
 *   51 Franklin Street, Fifth Floor
 *   Boston, MA  02110-1301  USA
 */

// disable release taqging, as this breaks in multi-module projects
createReleaseTag.enabled = false

def getVersionCode(version) {
    return Integer.parseInt(
            version.replaceAll("\\.", "")
                    .replaceAll("-SNAPSHOT", "")
                    .replaceAll("-BETA", "")
    )
}

def getNextVersionCode(version) {
    println("get next version code after " + version)
    def versionCode = getVersionCode(version)
    return version.endsWith("-SNAPSHOT") ? versionCode : versionCode + 1
}

def getNextVersion(version) {
    println("version is $version")
    def nextCode = String.valueOf(getNextVersionCode(version))
    def rev = nextCode.charAt(nextCode.length() - 1)
    def minor = nextCode.charAt(nextCode.length() - 2)
    def major = nextCode.substring(0, nextCode.length() - 2)
    return "$major.$minor.$rev"
}

play {
    def hasPlayServiceAccountCredentials = project.hasProperty('andFHEMPlayServiceAccountCredentials')
    enabled.set(hasPlayServiceAccountCredentials)

    if (hasPlayServiceAccountCredentials) {
        serviceAccountCredentials.set(file(andFHEMPlayServiceAccountCredentials))
    }
}

release {
    versionPropertyFile = '../gradle.properties'
    versionProperties = ['version']
    failOnSnapshotDependencies = false
    failOnPublishNeeded = false

    git {
        requireBranch.set("master")
        pushToRemote.set("origin")
    }
}

task setStage {
    setStage(System.getProperty('stage')) // explicitly configuration phase
}
beforeReleaseBuild.dependsOn('clean', 'setStage')

def setStage(stage) {
    println("building $stage")
    System.setProperty("release.useAutomaticVersion", "true")
    if (stage == 'production') {
        play.track = 'production'
        release.buildTasks = ['generateWhatsNew', 'build', 'publishApps', 'githubRelease']
        setNewReleaseVersion(getNextVersion(project.version))
        afterReleaseBuild.dependsOn("resetWhatsNew")
    } else if (stage == 'beta') {
        println("releaseBeta")
        play.track = 'beta'
        release.buildTasks = ['generateWhatsNew', 'build', 'publishApps']
        setNewReleaseVersion(getNextVersion(project.version) + "-BETA")
    } else if (stage == null) {
        release.buildTasks = []
    } else {
        throw IllegalArgumentException("don't know how to handle $stage, choose on of 'production', 'beta'")
    }
}

def getNewReleaseVersion() {
    return System.getProperty("release.releaseVersion")
}

def setNewReleaseVersion(value) {
    if (getNewReleaseVersion() == null) {
        println("set releaseVersion to " + value)
        System.setProperty("release.releaseVersion", value)

        def newVersion = getNextVersion(value) + "-SNAPSHOT"
        println("set new version after $value to $newVersion")
        System.setProperty("release.newVersion", newVersion)
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith("generate") && task.name.endsWith("ReleasePlayResources")) {
        task.dependsOn("generateWhatsNew")
    }
}